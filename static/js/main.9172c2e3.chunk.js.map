{"version":3,"sources":["components/map.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","districts","useState","district","setDistrict","statistic","setStatistic","windowWidth","useWindowWidth","map","useRef","useEffect","Object","keys","length","current","first","name","under_observation","under_home_isolation","total_hospitalised","hospitalised_today","corona_positive","cured_discharged","deaths","total","minConfirmed","maxConfirmed","d","svg","d3","projection","center","scale","height","translate","width","path","color","domain","append","attr","delta","Math","floor","cells","Array","from","i","legendLinear","legendColor","shapeWidth","titleWidth","labels","genLength","generatedLabels","n","n1","n2","title","orient","select","call","promises","Promise","all","then","kerala","selectAll","data","topojson","objects","features","enter","properties","DISTRICT","confirmed","on","target","parentNode","appendChild","style","text","parseFloat","parseInt","toFixed","className","id","ref","Table","setData","Headings","CustomHeading","tmp","push","components","Layout","plugins","LocalPlugin","sortProperties","sortAscending","customHeadingComponent","customComponent","value","App","setDistricts","fetched","setFetched","axios","get","response","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9172c2e3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { legendColor } from \"d3-svg-legend\";\nimport * as topojson from \"topojson\";\nimport useWindowWidth from \"hook-usewindowwidth\";\n\nfunction Map(props) {\n  const districts = props.districts;\n  const [district, setDistrict] = useState({});\n  const [statistic, setStatistic] = useState({});\n  const windowWidth = useWindowWidth();\n  const map = useRef(null);\n\n  useEffect(() => {\n    if (Object.keys(districts).length > 0 && map.current) {\n      const first = Object.keys(districts)[0];\n      setDistrict({\n        name: first,\n        under_observation: districts[first].under_observation,\n        under_home_isolation: districts[first].under_home_isolation,\n        total_hospitalised: districts[first].total_hospitalised,\n        hospitalised_today: districts[first].hospitalised_today,\n        corona_positive: districts[first].corona_positive,\n        cured_discharged: districts[first].cured_discharged,\n        deaths: districts[first].deaths\n      });\n      let total = 0;\n      let minConfirmed = 100000;\n      let maxConfirmed = 0;\n      for (const d in districts) {\n        total += districts[d].corona_positive;\n        if (districts[d].corona_positive < minConfirmed)\n          minConfirmed = districts[d].corona_positive;\n        if (districts[d].corona_positive > maxConfirmed)\n          maxConfirmed = districts[d].corona_positive;\n      }\n      setStatistic({\n        total: total,\n        maxConfirmed: maxConfirmed,\n        minConfirmed: minConfirmed\n      });\n\n      const svg = d3.select(map.current);\n\n      const width = 450;\n      const height = 800;\n\n      const projection = d3\n        .geoMercator()\n        .center([76.8, 9.7])\n        .scale(height * 8)\n        .translate([width / 2, height / 2]);\n\n      const path = d3.geoPath(projection);\n\n      // Colorbar\n      const maxInterpolation = 0.8;\n\n      function label({ i, genLength, generatedLabels }) {\n        if (i === genLength - 1) {\n          const n = Math.floor(generatedLabels[i]);\n          return `${n}+`;\n        } else {\n          const n1 = Math.floor(generatedLabels[i]);\n          const n2 = Math.floor(generatedLabels[i + 1]);\n          return `${n1} - ${n2}`;\n        }\n      }\n\n      const color = d3\n        .scaleSequential(d3.interpolateReds)\n        .domain([0, statistic.maxConfirmed / maxInterpolation]);\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"legend\")\n        .attr(\"transform\", \"translate(10, 375)\");\n\n      const numCells = 6;\n      const delta = Math.floor(statistic.maxConfirmed / (numCells - 1));\n      const cells = Array.from(Array(numCells).keys()).map(i => i * delta);\n\n      const legendLinear = legendColor()\n        .shapeWidth(30)\n        .cells(cells)\n        .titleWidth(3)\n        .labels(label)\n        .title(\"Confirmed Cases\")\n        .orient(\"vertical\")\n        .scale(color);\n\n      svg.select(\".legend\").call(legendLinear);\n\n      const promises = [d3.json(\"/kerala.json\")];\n\n      Promise.all(promises).then(ready);\n\n      function ready([kerala]) {\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"kerala\")\n          .selectAll(\"path\")\n          .data(topojson.feature(kerala, kerala.objects.kerala).features)\n          .enter()\n          .append(\"path\")\n          .attr(\"fill\", function(d) {\n            const n = districts[d.properties.DISTRICT].corona_positive;\n            return d3.interpolateReds(\n              (d.confirmed =\n                (n > 0) * 0.05 +\n                (n / statistic.maxConfirmed) * maxInterpolation)\n            );\n          })\n          .attr(\"d\", path)\n          .attr(\"pointer-events\", \"all\")\n          .on(\"mouseenter\", d => {\n            if (districts[d.properties.DISTRICT]) {\n              const current = d.properties.DISTRICT;\n              setDistrict({\n                name: current,\n                under_observation: districts[current].under_observation,\n                under_home_isolation: districts[current].under_home_isolation,\n                total_hospitalised: districts[current].total_hospitalised,\n                hospitalised_today: districts[current].hospitalised_today,\n                corona_positive: districts[current].corona_positive,\n                cured_discharged: districts[current].cured_discharged,\n                deaths: districts[current].deaths\n              });\n            }\n            const target = d3.event.target;\n            d3.select(target.parentNode.appendChild(target))\n              .attr(\"stroke\", \"#ff073a\")\n              .attr(\"stroke-width\", 2);\n          })\n          .on(\"mouseleave\", d => {\n            const target = d3.event.target;\n            d3.select(target).attr(\"stroke\", \"None\");\n          })\n          .style(\"cursor\", \"pointer\")\n          .append(\"title\")\n          .text(function(d) {\n            return (\n              parseFloat(\n                100 *\n                  (parseInt(districts[d.properties.DISTRICT].corona_positive) /\n                    statistic.total)\n              ).toFixed(2) +\n              \"% from \" +\n              d.properties.DISTRICT\n            );\n          });\n\n        svg\n          .append(\"path\")\n          .attr(\"stroke\", \"#ff073a20\")\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke-width\", 2)\n          .attr(\"d\", path(topojson.mesh(kerala, kerala.objects.kerala)));\n      }\n    }\n  }, [districts, statistic.maxConfirmed, statistic.total]);\n\n  return (\n    <div className=\"flex flex-nowrap sm:flex-wrap\">\n      <div className=\"flex flex-col sm:flex-row text-gray-800 text-left\">\n        <svg\n          className=\"font-sans text-base self-center sm:self-start\"\n          id=\"chart\"\n          height=\"575\"\n          width=\"300\"\n          ref={map}\n        ></svg>\n        <div className=\"w-48 min-w-0 sm:min-w-full md:min-w-0 lg:min-w-0 xl:min-w-0 flex-grow sm:flex-grow-\"></div>\n        <div className=\"flex flex-row sm:flex-col flex-wrap sm:flex-nowrap text-gray-800 w-auto sm:w-56 min-w-0 sm:min-w-full md:min-w-0 lg:min-w-0 xl:min-w-0 text-left sm:text-left md:text-right lg:text-right xl:text-right self-center\">\n          <div className=\"flex flex-col p-2 mb-1 font-semibold\">\n            <p className=\"font-sans text-lg\">{district.name}</p>\n          </div>\n          {windowWidth < 650 && <div className=\"w-screen\"></div>}\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-red-500\">\n            <p className=\"font-sans text-base\">Confirmed</p>\n            <p className=\"font-sans text-lg\">{district.corona_positive}</p>\n          </div>\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-yellow-500\">\n            <p className=\"font-sans text-base\">Active</p>\n            <p className=\"font-sans text-lg\">{district.total_hospitalised}</p>\n          </div>\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-green-500\">\n            <p className=\"font-sans text-base\">Recovered</p>\n            <p className=\"font-sans text-lg\">{district.cured_discharged}</p>\n          </div>\n\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-gray-800\">\n            <p className=\"font-sans text-base\">Deaths</p>\n            <p className=\"font-sans text-lg\">{district.deaths}</p>\n          </div>\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-gray-800\">\n            <p className=\"font-sans text-base\">Today</p>\n            <p className=\"font-sans text-lg\">{district.hospitalised_today}</p>\n          </div>\n          <div className=\"flex flex-col py-0 sm:py-2 px-2 my-0 sm:my-1 text-gray-800\">\n            <p className=\"font-sans text-base\">Under Observation</p>\n            <p className=\"font-sans text-lg\">{district.under_observation}</p>\n          </div>\n\n          <div className=\"flex flex-col pb-0 sm:py-2 px-2 my-0 sm:my-1 text-gray-800\">\n            <p className=\"font-sans text-base\">Home Isolation</p>\n            <p className=\"font-sans text-lg\">{district.under_home_isolation}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport Griddle, {\n  plugins,\n  RowDefinition,\n  ColumnDefinition\n} from \"griddle-react\";\nimport useWindowWidth from \"hook-usewindowwidth\";\n\nfunction Table(props) {\n  const districts = props.districts;\n  const [data, setData] = useState([]);\n  const windowWidth = useWindowWidth();\n  const NewLayout = ({ Table }) => (\n    <div>\n      <Table />\n    </div>\n  );\n  const sortProperties = [{ id: \"corona_positive\", sortAscending: false }];\n  const Headings = {\n    district: \"District\",\n    under_observation: \"Under Observation\",\n    under_home_isolation: \"Home Isolation\",\n    total_hospitalised: \"Active\",\n    hospitalised_today: \"Today\",\n    corona_positive: \"Confirmed\",\n    cured_discharged: \"Recovered\",\n    deaths: \"Deaths\"\n  };\n  const CustomColumn = ({ value }) => (\n    <span className=\"text-right text-blue-500\">{value}</span>\n  );\n  const CustomHeading = ({ title }) => (\n    <span className=\"text-right text-red-500\">{Headings[title]}</span>\n  );\n  useEffect(() => {\n    if (Object.keys(districts).length > 0) {\n      const tmp = [];\n      for (const d in districts) {\n        tmp.push({\n          district: d,\n          ...districts[d]\n        });\n      }\n      setData(tmp);\n    }\n  }, [districts]);\n\n  return (\n    <div className=\"flex text-base px-1 mt-4 sm:mt-0\">\n      <Griddle\n        data={data}\n        components={{\n          Layout: NewLayout\n        }}\n        plugins={[plugins.LocalPlugin]}\n        sortProperties={sortProperties}\n      >\n        <RowDefinition>\n          <ColumnDefinition\n            id=\"district\"\n            customHeadingComponent={CustomHeading}\n            customComponent={CustomColumn}\n          />\n          <ColumnDefinition\n            id=\"corona_positive\"\n            customHeadingComponent={CustomHeading}\n          />\n          <ColumnDefinition\n            id=\"total_hospitalised\"\n            customHeadingComponent={CustomHeading}\n          />\n\n          <ColumnDefinition\n            id=\"cured_discharged\"\n            customHeadingComponent={CustomHeading}\n          />\n          <ColumnDefinition\n            id=\"deaths\"\n            customHeadingComponent={CustomHeading}\n          />\n          {windowWidth > 650 && (\n            <ColumnDefinition\n              id=\"under_observation\"\n              customHeadingComponent={CustomHeading}\n            />\n          )}\n          {windowWidth > 650 && (\n            <ColumnDefinition\n              id=\"under_home_isolation\"\n              customHeadingComponent={CustomHeading}\n            />\n          )}\n          {windowWidth > 650 && (\n            <ColumnDefinition\n              id=\"hospitalised_today\"\n              customHeadingComponent={CustomHeading}\n            />\n          )}\n        </RowDefinition>\n      </Griddle>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport Map from \"./components/map\";\nimport Table from \"./components/table\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [districts, setDistricts] = useState({});\n  const [fetched, setFetched] = useState(false);\n\n  useEffect(() => {\n    if (fetched === false) {\n      axios\n        .get(\"https://volunteer.coronasafe.network/api/reports\")\n        .then(response => {\n          setDistricts(response.data.kerala);\n          setFetched(true);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n  }, [fetched]);\n\n  return (\n    <div className=\"app\">\n      {!fetched && (\n        <div className=\"spinner mx-auto my-auto w-screen h-screen\"></div>\n      )}\n      {fetched && (\n        <div>\n          <div className=\"flex flex-col items-center m-5\">\n            <p className=\"items-center font-sans text-3xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-5xl\">\n              Kerala COVID-19 Tracker\n            </p>\n            <div className=\"flex flex-wrap w-screen\">\n              <div className=\"flex w-auto sm:w-1/2 flex-col items-center\">\n                <Map districts={districts} />\n              </div>\n              <div className=\"flex w-auto sm:w-1/2 flex-col items-center self-center order-last sm:order-first\">\n                <Table districts={districts} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/main.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}